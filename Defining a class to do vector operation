class Vector:
    def __init__(self, a):
        self.a = a
    def __len__(self):
        return len(self.a)
    def __getitem__(self,b):
        return self.a[b]
    def __setitem__(self,b,val):
        self.a[b]=val
    def __add__(self, other):
        if len(self)>len(other):
            other.a.append(0*(len(self)-len(other))) # When I first typed, I put an 'other' instead of 'other.a' here, which led to an AttributeError.
                                                     # 'other' is always expected to be a object in Vector class. I think it's better to raise an error when 'other' is not a Vector.
        elif len(self)<len(other):
            self.a.append(0*(len(other)-len(self)))
        output=[0]*len(self)
        for i in range(len(self)):
            output[i]=self.a[i]+other[i]
        return Vector(output)
    def __sub__(self, other):
        if len(self)>len(other):
            other.a.append(0*(len(self)-len(other)))
        elif len(self)<len(other):
            self.a.append(0*(len(other)-len(self)))
        output=[0]*len(self)
        for i in range(len(self)):
            output[i]=self.a[i]-other[i]
        return Vector(output)
    def __str__(self):
        return '<'+ str(self.a)[1:-1]+'>'
if __name__=='__main__':
    v=Vector([1,2,3])
    w=Vector([3,4])
    print((v+w)-w) # get <1,2,3>
